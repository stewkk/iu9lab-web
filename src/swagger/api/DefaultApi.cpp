/**
* Lab generator API.
* Can be used to generate laboratory works reports for BMSTU IU9. 
*
* OpenAPI spec version: 0.0.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "DefaultApi.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

DefaultApi::DefaultApi(Pistache::Address addr)
    : httpEndpoint(std::make_shared<Pistache::Http::Endpoint>(addr))
{ };

void DefaultApi::init(size_t thr = 2) {
    auto opts = Pistache::Http::Endpoint::options()
        .threads(thr);
    httpEndpoint->init(opts);
    setupRoutes();
}

void DefaultApi::start() {
    httpEndpoint->setHandler(router.handler());
    httpEndpoint->serve();
}

void DefaultApi::shutdown() {
    httpEndpoint->shutdown();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(router, base + "/generateReport", Routes::bind(&DefaultApi::generate_report_handler, this));
    Routes::Get(router, base + "/reports/:reportId", Routes::bind(&DefaultApi::get_report_by_id_handler, this));

    // Default handler, called when a route is not found
    router.addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::generate_report_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    ReportData reportData;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
      reportData.fromJson(request_body); 
      this->generate_report(reportData, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::get_report_by_id_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_report_by_id(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

